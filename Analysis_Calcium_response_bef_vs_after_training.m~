ROI_table_20211020; % this clears everything!

% Path to scripts:
% Where are the scripts stored:
rootfolder = pwd ;
addpath([rootfolder,'/functions/']);

% Path to save:
MyPath = [rootfolder,'/data/'];
MyPath2save = [rootfolder,'/outputs/'];
    
% Define groups - they will be shown on the same figures ******************
MyGroups = [5:8];
type = A{MyGroups(1),1}(9:end);

% Find number of data point (and number of plots):
[c,~]=cellfun(@size,A,'UniformOutput',false);
c = cell2mat(c);
N_plot = sum(c(MyGroups,2));

% Define variables ********************************************************
[MyColor,norm_frame_dur,time_before_stim,time_after_stim,...
    ~,stim_num,DF_tp,DF,Mean_tp,Peak_tp,Ampli_tp,Scores,Resp_to_odors,Statistics,...
    MyFieldnames,whichCS,l,Cumu_larv] = reset_var(N_plot,type);
gap = 1 ; % additional time after stim

for which_group = MyGroups

    if which_group == MyGroups(end) % last of the pooled groups
        plot_the_mean = 'y' ; %data of groups will be averaged and plotted at end of script
        mi = 0;
    else
        plot_the_mean = 'n'; % compute the mean only after the last group
    end

% Reset counters  *********************************************************   
    [J,J_larv,J_step,Myj,j,cs,phase,t] = reset_counters;
    
% Find the data folders ***************************************************

% List folders containing specific keywords
    [Dir_Names] = list_dir2(MyPath,'1','',''); 

% Create vectors: N# ROIs per exp (loop on the same exp if many ROIs)
	[MyJ,J_idx] = list_individuals(A{which_group,2},Dir_Names);
    Dir_Names = {Dir_Names.name};
    
% Start loop **************************************************************

    for J = MyJ
        
        
    % Count steps in the J loop    
        J_step = J_step+1;  
        mycase = 'NotTheLastRunForThisIndiv';

    % Count of indiv in the J loop:
        if J_idx(J_step) == 1 % if =1 means new indiv
            J_larv = J_larv+1; % J_larv counts number of indiv
            l=l+1
            if J==MyJ(end) && J_idx(J_step) == J_idx(end)
                mycase = 'LastRunForThisIndiv';
            elseif J_idx(J_step) == J_idx(J_step+1)
                mycase = 'LastRunForThisIndiv';
            end
        elseif J==MyJ(end) && J_idx(J_step) == J_idx(end)
            mycase = 'LastRunForThisIndiv';
        elseif J_idx(J_step) > J_idx(J_step+1)
            mycase = 'LastRunForThisIndiv';
        end  
        
    % List of larvae name:
       Larvae_names{Cumu_larv+J_larv,1} = A{which_group,2}{J_larv,1} ;

     % Number of files to analyze for a given J 
     % (Files @ before & after training are mixed & will be sorted later)
        Myj = 1:length(A{which_group,2}{J_larv,2});
%        Myj = 1:4-sum(cellfun(@isempty, {A{which_group,2}{J_larv,:}}));

     % Corresponding ROI idx for a given J
       My_ROI_id = A{which_group,2}{J_larv,J_idx(J_step)+1};    
       
    % get the names of the tiff files for one indiv:    
       Fol = Dir_Names{J};
       List_filenames = list_files([MyPath,'/data/'],Dir_Names{J},...
           'LexA','fluo','xx','xx');
       List_filenames = {List_filenames.name};

% START small loop  *******************************************************  
       for j = Myj % N# of files taken into account
           
            % Get the file and subfolder names from the list    
            filename = List_filenames{j}(1:end-9)
            
% Load the data ***********************************************************        

             % Load T variable (fluo data)
            load([MyPath,'/data/',Dir_Names{J},'/',filename,'_fluo.mat']);

             % Load uFExp variable (metadata)
            load([MyPath,'/data/',Dir_Names{J},'/',filename,'_meta.mat']); 
          
             % Get info about this run
            [phase,cs,fr_before_stim,fr_during_stim,fr_after_stim,...
              myDifMean_G,myRawMean_G,frame_window]=...
                about_this_run_no_training(...
                filename,...
                T,...
                A{which_group,1},...
                My_ROI_id(j),...
                time_before_stim,...
                uFExp.STIM_dur,...
                uFExp.STIM_onset,...
                gap);

            % Count of stim repeats:
            if J_idx(J_step) == 1 % if =1 means new file
                stim_num(Cumu_larv+J_larv,phase) = ...
                    stim_num(Cumu_larv+J_larv,phase) + 1;
            end   
                
% % Compute Df/f0 and pool different ROI for the same stim ****************   

            for o = 1:length(cs)
              for t = 1:2

                % Compute dF/F0 for a given stim                       
                [y,x]=...
                    about_this_stim(...
                    round(uFExp.STIM_onset{cs(o)}(t)/T.frame_dur),...
                    fr_before_stim,...
                    fr_before_stim(1):fr_after_stim(end),...
                    myDifMean_G,...
                    T.frame_dur);
                
                % Pool dF/F0 for a given stim (mulitple regions)
                 my_stim_onset = round(time_before_stim/T.frame_dur);
                 
                 % will output a DF_tp which is normalised over
                 % norm_frame_dur
                [Mean_tp,Peak_tp,Ampli_tp,DF_tp,Scores] = pool_over_regions(...
                    o,...
                    phase,...
                    Cumu_larv+J_larv,...
                    y,...
                    fr_before_stim + my_stim_onset,...
                    fr_during_stim + my_stim_onset,...
                    Mean_tp,...
                    Peak_tp,...
                    Ampli_tp,...
                    DF_tp,...
                    Scores,...
                    2*(stim_num(Cumu_larv+J_larv,phase)-1)+t,...
                    norm_frame_dur,...
                    T.frame_dur);
               end % loop for 2 repeats per stim
            end % loop for the 2 CS stim
        end % loop for each file per larva
     
% % ALL DATA FOR A GIVEN DESIGN *********************************************   
%   
% ALL DATA FOR A GIVEN DESIGN *********************************************
    
%     for J = unique(MyJ)
      switch mycase 
      case 'LastRunForThisIndiv' 
      disp(['J=',num2str(J),' l=',num2str(l)]);      

        for phase = 1:2
            for o = 1:2%length(cs)
                for my_stim = 1:2*(stim_num(l,phase)-1)+t
                    
% Plot individual fluorescence over time (1 plot per indiv) ***************
                    
                    figure(1)
                    subplot(N_plot,2,2*(l-1)+o)

                    hold on
                    
                    % Define x and y
                    y = mean(DF_tp{o,phase,l,my_stim},1);
                    x = length(y) * norm_frame_dur;

                    % Define color code that fades with stim presentation
                    MyFadingColor = fading_color_code(...
                        DF_tp{o,phase,l,my_stim},...
                        my_stim,...
                        MyColor);
                    
                    % color in black before training
                    MyFadingColor = MyFadingColor./power(3-phase,1.5); 
                    
                    % plot 1 line per response to stimulus presentation
                    plot_indiv_dF_F0(l,...
                        o,...
                        MyFadingColor,...
                        ' ',...
                        ' ',...
                        [0 x -2 3],...
                        uFExp.STIM_dur{cs(o)}(t),...
                        time_before_stim,...
                        phase,...
                        smooth(y),...
                        norm_frame_dur:norm_frame_dur:x,...
                        0.8,...
                        0,0);
                    
                    % store the individual fluo response in new variable
                    DF.indiv_stim{o,phase,l}{my_stim} = y;
                    
                end   
                
                % interpolate & average fluo response for a given individual 
                % store the fluo response in new variable for pooling
                [DF] = interpolate_average_and_store(...
                    DF,...
                    o,...
                    phase,...
                    l,...
                    norm_frame_dur,...
                    norm_frame_dur);
                
                % plot the mean resp per individual
                plot_indiv_dF_F0(l,...
                    whichCS{1,o},...
                    MyColor/power(3-phase,1.5),...
                    Larvae_names{l},...
                    A{which_group,1},...
                    [0 x -1 3.5],...
                    uFExp.STIM_dur{cs(o)}(t),...
                    time_before_stim,...
                    phase,...
                    smooth(DF.Averaged_datasets{o,phase,l}),...
                    norm_frame_dur:norm_frame_dur:x,...
                    2,...
                    1,o);%time_before_stim*norm_frame_dur/T.frame_dur
            
                axis([0 x -1 10])
                
                if sum(and(A{which_group,1}(7)=='3',...
                        or(l==10,l==13)))>0
                    axis([0 x -1 9])
                elseif sum(and(A{which_group,1}(7)=='8',...
                        ismember([1,8,17],l)))>0
                    axis([0 x -1 6])
                elseif sum(and(A{which_group,1}(7)=='8',...
                        ismember(9,l)))>0
                    axis([0 x -1 10])
                end
            end      
        end
       
    % Test if responses to odors are significant (used to discard data)
         [Resp_to_odors]=...
            significant_response2(...
            Scores.ampli_indiv_events,...
            l,...
            Resp_to_odors); %Scores.mean_indiv_events
      end
    end %J

% Stats *******************************************************************
    if plot_the_mean == 'y' % Once all groups have been processed

        % Criteria to select indiv: p-value for before and after training
        [selected_indiv] = ...
            select_indiv(l,Resp_to_odors,0.15,0.15);
                
        % Statistical comparison on responses  
        [Statistics.RespToCS_pVal,Statistics.Analysis_variance] =...
            statistical_compa2(...
            selected_indiv,...
            MyFieldnames,...
            Scores,...
            cs,...
            mi,...
            Statistics.RespToCS_pVal,...
            Statistics.Analysis_variance,...
            phase,...
            whichCS,...
            MyJ) ;  
        
        % Store p value in a variable to be saved:
        Statistics.IndivResp_pVal = table(...
            Larvae_names,...
            Resp_to_odors.before_training,...
            Resp_to_odors.after_training);
        
        % Store the names of selected larvae:
        Statistics.Selected_larvae = {Larvae_names{selected_indiv}}';
        % Add this info to the plot
        for my_indiv = selected_indiv 
            
            figure(1)
            subplot(N_plot,2,2*(my_indiv)-1) ;
            text(.2,2.5,'Selected') %(x,y,txt)
            
        end   
        
% Plot averages of all larvae *********************************************       

        for o = 1:2%length(cs)
            for p = 1:2 %2 parameters
                for j = selected_indiv
                    
                    figure(3)%2+p)
                    subplot(2,2,o+2*p-2)
                    hold on
                    % plot the mean resp per individual
                    y = smooth(DF.Averaged_datasets{o,p,j});

                    plot_indiv_dF_F0(j,...
                        whichCS{1,o},...
                        MyColor./1.5,...
                        ' ',...
                        ' ',...
                        [0 norm_frame_dur*length(y) -1 3.5],...
                        uFExp.STIM_dur{cs(o)}(t),...
                        time_before_stim*norm_frame_dur/T.frame_dur,...
                        p,...
                        y+j,...
                        norm_frame_dur:norm_frame_dur:norm_frame_dur*length(y),...
                        1.2,...
                        1,o);
            
                    axis([0 norm_frame_dur*length(y) -1 8])
                    
                    % Plot scores (individual data)
                    figure(2) 
                    subplot(1,14,(o-1)*6+3+p) 
                    hold on
                    
                    plot_Mean_Scores2(...
                        p,o,...
                        Scores,...
                        whichCS,...
                        j,...
                        MyColor(j,:),...
                        10,...
                        1)
                end
                
                plot_Mean_Scores2(...
                    p,o,...
                    Scores,...
                    whichCS,...
                    selected_indiv,...
                    [0 0 0],...
                    14,...
                    2.5)         
            end

% Interpolate to average all individuals **********************************
            for phase = 1:2

                % Interpolate and pool the data
                [y,x,eb] = interpolate_and_pool_fluo(...
                    {DF.Averaged_datasets{o,phase,selected_indiv}},...
                    norm_frame_dur,...
                    l);  
                
% Plot the averaged data **************************************************
                % Plot the data
                figure(3)%2+phase)
                subplot(2,2,o+2*phase-2 )
                hold on
                    
                % Plot the shaded error bar
                shadedErrorBar(x,smooth(y),eb,...
                    {'color',[1 0 0]*(phase-1),...
                    'linewidth',2},1)    
                
                figure(2)
                subplot(1,14,(o-1)*6+1:(o-1)*6+3) 
                hold on

                % Plot the shaded error bar
                shadedErrorBar(x,smooth(y),eb,...
                    {'color',[1 0 0]*(phase-1),...
                    'linewidth',2})
                
                plot_indiv_dF_F0(phase,...
                    o,...
                    [0 0 0;1 0 0],...
                    whichCS{1,o},...
                    ' ',...
                    [0 max(x) -.4 2.5],...
                    uFExp.STIM_dur{cs(o)}(t),...
                    time_before_stim,...
                    1,...
                    smooth(y),...
                    x,...
                    1,...
                    phase,1);
                
            end
        end
        subplot(1,7,7)
        make_legend({'Before training','After training'},{'k','r'})
    end
    
% End of the loop: keep track of the total individuals ********************
    Cumu_larv = Cumu_larv+J_larv;
end

% Define figure properties and save figures and statistics ****************
save_it_all([MyPath,'/o,A{which_group,1},Statistics,N_plot,'train',length(cs))


T_CSp = table();
T_CSm = table();
vars_CSp{1} = x;
vars_CSm{1} = x;
varnames{1} = 'normalised_time'

for i=1:size(DF.indiv_stim,3)
    vars_CSm{i+1} = cell2mat(DF.indiv_stim{2,1,i}');
    vars_CSp{i+1} = cell2mat(DF.indiv_stim{1,1,i}');
    varnames{i+1} = ['indiv',num2str(i),'_repeat'];
end
rows = cellfun(@(M) size(M,2), vars_EA);
cols = cellfun(@(M) size(M,1), vars_EA);
maxrows = max(rows);
for K = 1 : length(varnames)
    T_CSp.(varnames{K}) = [vars_CSp{K}'; nan(maxrows - rows(K), cols(K))];
    T_CSm.(varnames{K}) = [vars_CSm{K}'; nan(maxrows - rows(K), cols(K))];
end
writetable(T_CSp, [A{which_group,1},'Resp_to_CSp.csv']);
writetable(T_CSm, [A{which_group,1},'Resp_to_CSm.csv']);


